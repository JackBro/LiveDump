/////////////////////////////////////////////////////////////////////////
// $Id: bochs.h,v 1.61 2002/03/26 13:59:35 bdenney Exp $
/////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2001  MandrakeSoft S.A.
//
//    MandrakeSoft S.A.
//    43, rue d'Aboukir
//    75002 Paris - France
//    http://www.linux-mandrake.com/
//    http://www.mandrakesoft.com/
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

//
// bochs.h is the master header file for all C++ code.  It includes all 
// the system header files needed by bochs, and also includes all the bochs
// C++ header files.  Because bochs.h and the files that it includes has 
// structure and class definitions, it cannot be called from C code.
// 

#ifndef BX_BOCHS_H
#  define BX_BOCHS_H 1

#include "config.h"      /* generated by configure script from config.h.in */

#include <intrin.h>

extern "C" {
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#ifndef WIN32
#  include <unistd.h>
#else
#  include <io.h>
#endif
#include <time.h>
#if BX_WITH_MACOS
#  include <types.h>
#  include <stat.h>
#elif BX_WITH_CARBON
#  include <sys/types.h>
#  include <sys/stat.h>
#  include <sys/param.h> /* for MAXPATHLEN */
#  include <utime.h>
#else
#  ifndef WIN32
#    include <sys/time.h>
#  endif
#  include <sys/types.h>
#  include <sys/stat.h>
#endif
#include <ctype.h>
#include <string.h>
#include <fcntl.h>
#ifdef macintosh
#  define SuperDrive "[fd:]"
#endif
}

#include "osdep.h"       /* platform dependent includes and defines */ 
//#include "debug/debug.h"
#include "bxversion.h"

//#include "gui/siminterface.h"

//
// some macros to interface the CPU and memory to external environment
// so that these functions can be redirected to the debugger when
// needed.
//

#if ((BX_DEBUGGER == 1) && (BX_NUM_SIMULATORS >= 2))
// =-=-=-=-=-=-=- Redirected to cosimulation debugger -=-=-=-=-=-=-=
#define BX_VGA_MEM_READ(addr)       bx_dbg_ucmem_read(addr)
#define BX_VGA_MEM_WRITE(addr, val) bx_dbg_ucmem_write(addr, val)
#if BX_SUPPORT_A20
#  define A20ADDR(x)               ( (x) & bx_pc_system.a20_mask )
#else
#  define A20ADDR(x)                (x)
#endif
#define BX_INP(addr, len)           bx_dbg_inp(addr, len)
#define BX_OUTP(addr, val, len)     bx_dbg_outp(addr, val, len)
#define BX_HRQ                      (bx_pc_system.HRQ)
#define BX_RAISE_HLDA()             bx_dbg_raise_HLDA()
#define BX_TICK1()
#define BX_INTR                     bx_pc_system.INTR
#define BX_SET_INTR(b)              bx_dbg_set_INTR(b)
#if BX_SIM_ID == 0
#  define bx_cpu_c                  bx_cpu0_c
#  define BX_CPU                    bx_cpu0
#  define BX_MEM_C                  bx_mem0_c
#  define BX_MEM                    bx_mem0
#else
#  define bx_cpu_c                  bx_cpu1_c
#  define BX_CPU                    bx_cpu1
#  define BX_MEM_C                  bx_mem1_c
#  define BX_MEM                    bx_mem1
#endif
#define BX_SET_ENABLE_A20(enabled)  bx_dbg_async_pin_request(BX_DBG_ASYNC_PENDING_A20, \
                                      enabled)
#define BX_GET_ENABLE_A20()         bx_pc_system.get_enable_a20()
#error FIXME: cosim mode not fixed yet

#else

// =-=-=-=-=-=-=- Normal optimized use -=-=-=-=-=-=-=-=-=-=-=-=-=-=
#define BX_VGA_MEM_READ(addr) (bx_devices.vga->mem_read(addr))
#define BX_VGA_MEM_WRITE(addr, val) bx_devices.vga->mem_write(addr, val)
#if BX_SUPPORT_A20
#  define A20ADDR(x)               ( (x) & bx_pc_system.a20_mask )
#else
#  define A20ADDR(x)               (x)
#endif
//
// some pc_systems functions just redirect to the IO devices so optimize
// by eliminating call here
//
// #define BX_INP(addr, len)        bx_pc_system.inp(addr, len)
// #define BX_OUTP(addr, val, len)  bx_pc_system.outp(addr, val, len)
#define BX_INP(addr, len)           bx_devices.inp(addr, len)
#define BX_OUTP(addr, val, len)     bx_devices.outp(addr, val, len)
#define BX_HRQ                      (bx_pc_system.HRQ)
#define BX_RAISE_HLDA()             bx_pc_system.raise_HLDA()
#define BX_TICK1()                  bx_pc_system.tick1()
#define BX_TICKN(n)                 bx_pc_system.tickn(n)
#define BX_INTR                     bx_pc_system.INTR
#define BX_SET_INTR(b)              bx_pc_system.set_INTR(b)
#define bx_cpu_c                    bx_cpu_c
#define BX_MEM_C                    bx_mem_c
#if BX_SMP_PROCESSORS==1
#define BX_CPU(x)                   (&bx_cpu)
#define BX_MEM(x)                   (&bx_mem)
#else
#define BX_CPU(x)                   (bx_cpu_array[x])
#define BX_MEM(x)                   (bx_mem_array[x])
#endif

#define BX_SET_ENABLE_A20(enabled)  bx_pc_system.set_enable_a20(enabled)
#define BX_GET_ENABLE_A20()         bx_pc_system.get_enable_a20()

#endif

// you can't use static member functions on the CPU, if there are going
// to be 2 cpus.  Check this early on.
#if (BX_SMP_PROCESSORS>1)
#  if (BX_USE_CPU_SMF!=0)
#    error For SMP simulation, BX_USE_CPU_SMF must be 0.
#  endif
#endif


// #define BX_IAC()                 bx_pc_system.IAC()
#define BX_IAC()                    bx_devices.pic->IAC()
//#define BX_IAC()                    bx_dbg_IAC()

//
// Ways for the the external environment to report back information
// to the debugger.
//

#include "cpu/cpu.h"

#define BX_READ    10
#define BX_WRITE   11
#define BX_RW      12 

#define UNBRACE(x, ...) x, __VA_ARGS__
#define DBG_PRINT(x) do { char out[4096]; sprintf_s(out, 4096, UNBRACE x); strcat_s(out, 4096, "\n"); OutputDebugStringA(out); } while (0)
#define DO_INT3 do {\
	DebugBreak(); \
	} while(0)

#define BX_INFO(x)  DBG_PRINT(x)
#define BX_DEBUG(x) DBG_PRINT(x)
#define BX_ERROR(x) do {DBG_PRINT(x); DO_INT3; } while (0)
#define BX_PANIC(x) do {DBG_PRINT(x); DO_INT3; } while (0)
#define BX_ASSERT(x) do { if (!(x)) DO_INT3; } while (0)

#  define BX_INSTR_INIT()
#  define BX_INSTR_SHUTDOWN()
#  define BX_INSTR_CNEAR_BRANCH_TAKEN(new_eip)
#  define BX_INSTR_CNEAR_BRANCH_NOT_TAKEN()
#  define BX_INSTR_UCNEAR_BRANCH(what, new_eip)
#  define BX_INSTR_FAR_BRANCH(what, new_cs, new_eip)
#  define BX_INSTR_OPCODE_BEGIN(linear)
#  define BX_INSTR_OPCODE_END(linear)
#  define BX_INSTR_OPCODE_BYTE1(b)
#  define BX_INSTR_OPCODE_BYTE2(b)
#  define BX_INSTR_OPCODE_G1EbIb(nnn)
#  define BX_INSTR_OPCODE_G1EvIv(nnn)
#  define BX_INSTR_OPCODE_G1EvIb(nnn)
#  define BX_INSTR_OPCODE_G2EbIb(nnn)
#  define BX_INSTR_OPCODE_G2EvIb(nnn)
#  define BX_INSTR_OPCODE_G2Eb1(nnn)
#  define BX_INSTR_OPCODE_G2Ev1(nnn)
#  define BX_INSTR_OPCODE_G2EbCL(nnn)
#  define BX_INSTR_OPCODE_G2EvCL(nnn)
#  define BX_INSTR_OPCODE_G3Eb(nnn)
#  define BX_INSTR_OPCODE_G3Ev(nnn)
#  define BX_INSTR_OPCODE_G4(nnn)
#  define BX_INSTR_OPCODE_G5(nnn)
#  define BX_INSTR_OPCODE_G6(nnn)
#  define BX_INSTR_OPCODE_G7(nnn)
#  define BX_INSTR_OPCODE_G8EvIb(nnn)
#  define BX_INSTR_MEM_CODE(linear, size)
#  define BX_INSTR_MEM_DATA(linear, size, rw)
#  define BX_INSTR_EXCEPTION(vector)
#  define BX_INSTR_INP(addr, len)
#  define BX_INSTR_INP2(addr, len, val)
#  define BX_INSTR_OUTP(addr, len)
#  define BX_INSTR_OUTP2(addr, len, val)
#  define BX_INSTR_FETCH_BYTE(val8)
#  define BX_INSTR_FETCH_WORD(val16)
#  define BX_INSTR_FETCH_DWORD(val32)
#  define BX_INSTR_PHY_WRITE(addr, len)
#  define BX_INSTR_PHY_READ(addr, len)
#  define BX_INSTR_INTERRUPT(vector)
#  define BX_INSTR_TLB_CNTRL(what, newval)
#  define BX_INSTR_CACHE_CNTRL(what)
#  define BX_INSTR_HWINTERRUPT(vector, cs, eip)
#  define BX_INSTR_OPCODE_REPEATING()

#  define BX_INSTR_PREFIX_AS()
#  define BX_INSTR_PREFIX_OS()
#  define BX_INSTR_PREFIX_REP()
#  define BX_INSTR_PREFIX_REPNE()
#  define BX_INSTR_PREFIX_LOCK()
#  define BX_INSTR_PREFIX_CS()
#  define BX_INSTR_PREFIX_SS()
#  define BX_INSTR_PREFIX_DS()
#  define BX_INSTR_PREFIX_ES()
#  define BX_INSTR_PREFIX_FS()
#  define BX_INSTR_PREFIX_GS()

#  define BX_INSTR_MODRM32(modrm)
#  define BX_INSTR_SIB32(sib)
#  define BX_INSTR_MODRM16(modrm)
#  define BX_INSTR_SIB_mod0_base5(ss)
#  define BX_INSTR_SIB_MOD0_IND4()
#  define BX_INSTR_SIB_MOD1_IND4()
#  define BX_INSTR_SIB_MOD2_IND4()

#  define BX_INSTR_IRET()
#  define BX_INSTR_DEBUG_PROMPT()

#  define BX_INSTR_LIN_READ(lin, phy, len)
#  define BX_INSTR_LIN_WRITE(lin, phy, len)
#  define BX_INSTR_START()                   
#  define BX_INSTR_STOP()                    
#  define BX_INSTR_RESET()                   
#  define BX_INSTR_PRINT()      

#ifndef UNUSED
#  define UNUSED(x) ((void)x)
#endif


//#define NULL ((void *)0)


#include "memory/memory.h"

#endif  /* BX_BOCHS_H */
